from aiogram import Router, F
from aiogram.types import Message

from app.data_fetcher import (django_get_user_activity,
                              django_get_user_subscribe, django_set_user_subscribe, django_unsubscribe_user)
from app.routers.main_menu_router.keyboards.main_menu_buttons import main_menu_kb, with_subscribe, without_subscribe
from app.routers.registration_router.utils.states import Register

from app.routers.main_menu_router.middleware.user_activity import UserActivityMiddleware

from api.main import CBRApi


router = Router()

router.message.middleware(UserActivityMiddleware())


@router.message(Register.end_registration, F.text.lower() == 'üåê –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.')
async def about_user_handler(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    user_language_code = message.from_user.language_code

    await message.reply(
        f"–í—ã–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—Å.\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}.\n"
        f"–ò–º—è: {first_name}.\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name}.\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: {username}.\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: {user_language_code}.",
        reply_markup=main_menu_kb()
    )


@router.message(Register.end_registration, F.text.lower() == 'üìñ –º–æ—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.')
async def user_activity_handler(message: Message):
    msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —á–∞—Ç-–±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å . . ."
    )

    data = {
        "tg_user_id": message.from_user.id,
    }
    response = await django_get_user_activity(data)

    result_string = ''

    for data in response.get('result'):
        result_string += data[:-12] + '\n'

    await msg.delete()

    await message.answer(
        f"{result_string}",
        reply_markup=main_menu_kb()
    )


@router.message(Register.end_registration, F.text.lower() == 'üí∞ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è.')
async def rub_currency_rate_handler(message: Message):
    msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —á–∞—Ç-–±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å . . ."
    )

    currency_rate_object = CBRApi()
    currency_rate_result = currency_rate_object.get_result

    if currency_rate_result:
        await msg.delete()
        await message.reply(
            f"–í—ã–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ —Ä—É–±–ª—è.\n"
            f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {currency_rate_result.get('USD_RUB')}.\n"
            f"–ö—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é: {currency_rate_result.get('EUR_RUB')}.\n",
            reply_markup=main_menu_kb()
        )

    else:
        await message.answer(
            "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb()
        )


@router.message(Register.end_registration, F.text.lower() == 'üíå –ø–æ–¥–ø–∏—Å–∫–∞.')
async def subscribe_handler(message: Message):
    data = {
        "tg_user_id": message.from_user.id,
    }

    response = await django_get_user_subscribe(data)

    if response.get('have_a_subscription'):
        await message.answer(
            "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫—É—Ä—Å–∞ —Ä—É–±–ª—è.\n"
            "–ü–æ –∂–µ–ª–∞–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=with_subscribe()
        )

    else:
        await message.answer(
            "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫—É—Ä—Å —Ä—É–±–ª—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.",
            reply_markup=without_subscribe()
        )


@router.message(Register.end_registration, F.text.lower() == '‚úÖ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.')
async def subscribe_user_handler(message: Message):

    data = {
        "tg_user_id": message.from_user.id,
    }

    response = await django_set_user_subscribe(data)

    if response:
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.",
            reply_markup=main_menu_kb()
        )

    else:
        await message.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–≤–∞–∂–¥—ã.",
            reply_markup=with_subscribe()
        )


@router.message(Register.end_registration, F.text.lower() == '‚ö†Ô∏è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.')
async def unsubscribe_user_handler(message: Message):
    data = {
        "tg_user_id": message.from_user.id,
    }

    response = await django_unsubscribe_user(data)

    if response:
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è.",
            reply_markup=main_menu_kb()
        )

    else:
        await message.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –≤–µ–¥—å –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.",
            reply_markup=without_subscribe()
        )
